
float calculateShadow(vec4 fragPosLightSpace, sampler2DArray shadowArray, int index, float bias){
        vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
        projCoords = projCoords * 0.5 + 0.5;
        float closestDepth = texture(shadowArray, vec3(projCoords.xy, index)).r;
        float currentDepth = projCoords.z;
        float shadow = currentDepth - bias > closestDepth ? 1.0 : 0.0;
        if(projCoords.z > 1.0) shadow = 0.0;
        return shadow;
}

float calculateShadowPCF(vec4 fragPosLightSpace, sampler2DArray shadowArray, int index, float bias){
        vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
        projCoords = projCoords * 0.5 + 0.5;
        float closestDepth = texture(shadowArray, vec3(projCoords.xy, index)).r;
        float currentDepth = projCoords.z;
		vec2 texelSize = 1.0 / textureSize(shadowArray, 0).xy;
        float shadow = 0.0;
		for(int x = -1; x <= 1; ++x){
			for(int y = -1; y <= 1; ++y){
				float pcfDepth = texture( shadowArray, vec3(projCoords.x, projCoords.y, index) + vec3(x, y, 0.0) * vec3(texelSize, 1.0) ).r;
				shadow += (currentDepth - bias > pcfDepth) ? 1.0 : 0.0;
			}
		}
		shadow /= 9.0;

		if(currentDepth > 1.0){
			shadow = 0.0;
		}
		return shadow;
}

float calculateShadow(vec4 fragPosLightSpace, sampler2DArray shadowArray, int index){
        vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
        projCoords = projCoords * 0.5 + 0.5;
        float closestDepth = texture(shadowArray, vec3(projCoords.xy, index)).r;
        float currentDepth = projCoords.z;
        float shadow = currentDepth > closestDepth ? 1.0 : 0.0;
        return shadow;
}

float calculateShadow(vec4 fragPosLightSpace, sampler2D shadowMap, vec2 lowerBound, vec2 upperBound){
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    projCoords = projCoords * 0.5 + 0.5;
    vec2 newCoords = (lowerBound + vec2(0.25, 0.25)) + (projCoords.xy * vec2(0.25, 0.25));
    float closestDepth = texture(shadowMap, newCoords).r;
    float currentDepth = projCoords.z;
    float shadow = currentDepth > closestDepth ? 1.0 : 0.0;
    return shadow;
}