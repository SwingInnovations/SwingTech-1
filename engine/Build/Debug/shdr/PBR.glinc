float DistribGGX(vec3 N, vec3 H, float a){
    float r = a * a;
    float a2 = r * r;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH * NdotH;
    float nom = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
    return nom / (denom + 0.0001);
}

float GeomSchlickGGX(float NdotV, float roughness){
    float r = (roughness + 1.0);
    float k = (r * r) / 8.0;

    float nom = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / (denom + 0.0001);
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float k){
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx1 = GeomSchlickGGX(NdotV, k);
    float ggx2 = GeomSchlickGGX(NdotL, k);
    return ggx1 * ggx2;
}

vec2 Hammersley(int i, int N){
    return vec2( float(i)/float(N), float(bitfieldReverse(uint(i))) * 2.3283064365386963e-10);
}

vec3 ISample_Ggx(vec2 Xi, float R, vec3 N){
    float a = R * R;
    float Phi = 2 * PI * Xi.x;
    float cosTheta = sqrt((1 - Xi.y) / (1 + (a * a - 1) * Xi.y));
    float sinTheta = sqrt(1 - cosTheta * cosTheta);

    vec3 H = vec3(sinTheta * cos(Phi),
                  sinTheta * sin(Phi),
                  cosTheta);
    vec3 up = abs(N.z) < 0.999 ? vec3(0, 0, 1) : vec3(1, 0, 0);
    vec3 tanx = normalize(cross(up, N));
    vec3 tany = normalize(cross(N, tanx));
    return tanx * H.x + tany * H.y + N * H.z;
}

vec3 PreFilterEnvMap( float roughness, vec3 R, int SampleCount){

	vec3 N= R;
	vec3 V= R;

	vec3 fliteredColor = vec3(0);

	float w=0;

	for( int i =0; i< SampleCount; i++ )
	{
		vec2 Xi = Hammersley( i, SampleCount );

		vec3 H = ISample_Ggx( Xi, roughness, N );
		vec3 L = 2 * dot( V , H ) * H - V;

		float NdotL = clamp( dot( N , L ) , 0.0 , 1.0 );


		if ( NdotL >= 0 ){

			fliteredColor += texture(_WorldCubeMap, L, roughness*4).xyz*NdotL;
			w+=NdotL;

		}
	}

	return (fliteredColor / w);
}

vec3 PreFilterEnvMap( float roughness, vec3 R){
	return PreFilterEnvMap( roughness, R, int(clamp(70.0*(roughness),40.0,70.0)));
}

vec3 FresnelSchlick(float cosTheta, vec3 F0){
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

//vec2 IntegrateBRDF( float R, float NdotV){
//
//	vec3 V;
//	V.x= sqrt(1.0f - NdotV *NdotV);
//	V.y =0;
//	V.z = NdotV;
//
//	float A = 0;
//	float B = 0;
//
//	int SampleCount = 1;
//	float w=0;
//
//	for( int i =0; i< SampleCount; i++ )
//	{
//		vec2 Xi = Hammersley( i, SampleCount );
//
//		vec3 H = ISample_Ggx( Xi, R, Normal );
//		vec3 L = 2 * dot( V , H ) * H - V;
//
//		float NdotL = clamp(L.z , 0.0 , 1.0 );
//		float NdotH = clamp(  H.z  , 0.0 , 1.0 );
//		float VdotH = clamp( dot( V , H ) , 0.0 , 1.0 );
//
//		if ( NdotL > 0 ){
//
//			float G_Vis =G_Smith( NdotL, NdotV, R )* VdotH / (NdotH * NdotV);
//
//			float Fc = pow( 1 - dot( Normal , V ), 5 );
//
//
//			A+=(1 - Fc) * G_Vis;
//
//			B+= Fc * G_Vis;
//			w+=G_Vis;
//		}
//	}
//
//	return vec2(A,B)/SampleCount;
//
//}

vec2 IntegrateBRDFMobile( float R, float NdotV){
	vec4 c0 = vec4( -1, -0.0275, -0.572, 0.022 );
	vec4 c1 = vec4( 1, 0.0425, 1.04, -0.04 );
	vec4 r = R * c0 + c1;
	float a004 = min( r.x * r.x, exp2( -9.28 * NdotV ) ) * r.x + r.y;
	vec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;
	return AB;
}

vec3 Spec_IBL( float roughness, vec3 N, vec3 V, vec3 baseColor){
	float NdotV = clamp (dot(N,V),0.0,1.0);
	vec3 R = 2* dot(V,N)*N-V;

	vec3 PreFilteredColor = PreFilterEnvMap(roughness,R);
	vec2 BRDF = IntegrateBRDFMobile(roughness, NdotV);

	return  PreFilteredColor* (baseColor*  BRDF.x + BRDF.y);
}

float Ggx_Dist_old(float NdotH, float r){
	float alpha = r*r;

	float alpha2= alpha*alpha;

	float ndoth2=NdotH*NdotH;
	float denom = ndoth2*alpha2+(1-ndoth2);
	return ((NdotH) *alpha2)/(PI*denom*denom);
}

vec3 BlendMaterial_IBL(vec3 Spec, vec3 Base,float fresnel){
	vec3 dialectric = texture2D(Material.Diffuse_Tex,TexCoord).xyz+ vec3(fresnel*Spec);
	vec3 metal = Base*Spec;

	return mix(dialectric,metal,_Metallic);
}

vec3 BlendMaterial_Directional(vec3 Spec, vec3 Diff, vec3 Base,vec3 IBL,float intensity,vec3 lightColor){
	vec3 dialectric =( IBL * (Diff*intensity + _GlobalAmbient))+lightColor*Spec*intensity*.6;
	vec3 metal =IBL+ (Spec)*intensity*lightColor*Base;

	return   mix(dialectric,metal,_Metallic);
}

vec3 BlendMaterial_Directional(vec3 Spec, vec3 Diff, vec3 Base,vec3 IBL,float intensity,vec3 lightColor, float shadow){
	vec3 dialectric =( IBL *(((1.0-shadow)* Diff*intensity) + (_GlobalAmbient*0.5)))+lightColor*Spec*intensity*.6;
	vec3 metal =IBL+ (Spec)*intensity*lightColor*((1.0 - shadow) * Base);

	return   mix(dialectric,metal,_Metallic);
}

vec3 DirectPBR(vec3 albedo, vec3 MRA, vec3 pos, vec3 Normal, vec3 lightPosition, vec3 lightColor, vec3 camPos){
    vec3 N = normalize(Normal);
    vec3 V = normalize(camPos - pos);
    vec3 F0 = vec3(0.04);
    F0 = mix(F0, albedo, MRA.x);
    vec3 Lo = vec3(0.0);
    vec3 L = normalize(lightPosition - pos);
    vec3 H = normalize(V + L);
    float len = length(lightPosition - pos);
    float distance = (len == 0) ? len : 1;
    float attentation = 1.0 / (distance * distance);
    vec3 radiance = lightColor * attentation;

    float NDF = DistribGGX(N, H, MRA.y);
    float G = GeometrySmith(N, V, L, MRA.y);
    vec3 F = FresnelSchlick(max(dot(H, V), 0.0), F0);
    vec3 kS = F;
    vec3 kD = (vec3(1.0) - kS);
    kD *= 1.0 - MRA.x;
    vec3 nom = NDF * G * F;
    float denom = 4 * max(dot(N,V), 0.0) * max(dot(N,V), 0.0) + 0.001;
    vec3 specular = nom / denom;
    float NdotL = max(dot(N, L), 0.0);
    Lo += (kD * albedo / PI + specular) * radiance * NdotL;

    vec3 ambient = vec3(0.03) * albedo;
    vec3 color = ambient + Lo;

    color = color / (color + vec3(1.0));
    color = pow(color, vec3(1.0 / 2.2));
    return color;
}