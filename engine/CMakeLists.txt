cmake_minimum_required(VERSION 3.2)
project(SwingTech1)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_SOURCE_DIR}/Build/Debug")
if(WIN32)
	if(MINGW)
		message(STATUS "Using MinGW Compiler")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -lmingw32 -Wa,-mbig-obj")
		set(CMAKE_EXE_LINKER_FLAGS "-static-libgcc -static-libstdc++")
	elseif(MSVC)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
		set(CMAKE_EXE_LINKER_FLAGS "static-libstdc++")
	endif()
else()
	set(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} -std=c++14")
	set(CMAKE_EXE_LINKER_FLAGS "-static-libgcc -static-libstdc++")
endif()

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

if (WIN32)
	if(MINGW)
	    include_directories(${PROJECT_SOURCE_DIR}/include)
		link_directories(${PROJECT_SOURCE_DIR}/lib/windows/MinGW/)
		set(FREETYPE ${PROJECT_SOURCE_DIR}/lib/windows/MinGW/libfreetype.a)
		set(GLEW ${PROJECT_SOURCE_DIR}/lib/windows/MinGW/libglew32.dll.a)
		set(LUA ${PROJECT_SOURCE_DIR}/lib/windows/MinGW/liblua.a)
		set(ASSIMP ${PROJECT_SOURCE_DIR}/lib/windows/MinGW/libassimp.dll.a)
		set(BULLET_COLLISION ${PROJECT_SOURCE_DIR}/lib/windows/MinGW/libBulletCollision.dll.a)
		set(BULLET_DYNAMICS ${PROJECT_SOURCE_DIR}/lib/windows/MinGW/libBulletDynamics.dll.a)
		set(BULLET_LINEAR_MATH ${PROJECT_SOURCE_DIR}/lib/windows/MinGW/libLinearMath.dll.a)
	elseif(MSVC)
		message(STATUS "Using MSVC Compiler to Link")
		include_directories(${PROJECT_SOURCE_DIR}/include)
		link_directories(${PROJECT_SOURCE_DIR}/lib/windows/MSVC/)
		set(SDL2 ${PROJECT_SOURCE_DIR}/lib/windows/MSVC/SDL2.lib)
		set(SLD2main ${PROJECT_SOURCE_DIR}/lib/windows/MSVC/SLD2main.lib)
	endif()
else()
    find_package(SDL2 REQUIRED)
    set(ASSIMP ${PROJECT_SOURCE_DIR}/lib/linux/ASSIMP/libassimp.so)
    set(GLEW2.1 ${PROJECT_SOURCE_DIR}/lib/linux/GL/GLEW/libGLEW.so)
endif()

set(SOURCE_FILES include/json11/json11.hpp include/json11/json11.cpp src/Math/Shape/Shape.h src/Math/Shape/Rect.h src/Application/STSceneManager.h src/Entity/STLight.h src/Graphics/Interface/STInterWidget.h src/Graphics/STMaterial.h src/Graphics/STColor.h src/Math/Shape/Quad.h src/Entity/Util/STMesh.h src/Graphics/VK/VKGraphics.cpp src/Graphics/VK/VKGraphics.h src/Graphics/GL/GLMesh.cpp src/Graphics/GL/GLMesh.h src/Math/Shape/Cube.h src/Entity/Components/STScriptComponent.cpp src/Entity/Components/STScriptComponent.h src/Entity/Components/STEventComponent.cpp src/Entity/Components/STEventComponent.h src/Graphics/Interface/STLabel.cpp src/Graphics/Interface/STLabel.h src/Entity/Util/STMesh.cpp src/Graphics/STFontMetrics.h src/Graphics/Interface/STButton.cpp src/Graphics/Interface/STButton.h src/Application/STGame.cpp src/Application/STGame.h src/Math/STCore.h src/Math/Vector.h src/Math/Matrix.h src/Application/Input.cpp src/Application/Input.h src/Application/STGameState.cpp src/Application/STGameState.h src/Math/Quaternion.h src/Graphics/STGraphics.cpp src/Graphics/STGraphics.h src/Graphics/GL/GLGraphics.cpp src/Graphics/GL/GLGraphics.h src/Entity/Transform.h src/Graphics/Camera.cpp src/Graphics/Camera.h src/Graphics/Shader.cpp src/Graphics/Shader.h src/Graphics/GL/GLShader.cpp src/Graphics/GL/GLShader.h src/Graphics/Texture.h src/Graphics/GL/GLTexture.cpp src/Graphics/GL/GLTexture.h src/Entity/STEntity.cpp src/Entity/STEntity.h src/Entity/Components/STComponent.h src/Entity/Components/STGraphicsComponent.cpp src/Entity/Components/STGraphicsComponent.h src/Entity/Components/STMeshComponent.cpp src/Entity/Components/STMeshComponent.h src/Math/Vertex.h src/Entity/Components/STRectBoundsComponent.cpp src/Entity/Components/STRectBoundsComponent.h src/Graphics/Interface/STLabel.cpp src/Graphics/Interface/STLabel.h "src/Math/2D Bounds/BoundShape.h" "src/Math/2D Bounds/BoundRect.h" src/Entity/Util/STMesh.cpp src/Entity/STActor.cpp src/Entity/STActor.h src/Graphics/Interface/STPanel.cpp src/Graphics/Interface/STPanel.h src/Math/Euler.h src/Graphics/Interface/STMenu.cpp src/Graphics/Interface/STMenu.h src/Graphics/Interface/STButtonGroup.cpp src/Graphics/Interface/STButtonGroup.h src/Graphics/Interface/STEntry.cpp src/Graphics/Interface/STEntry.h src/Application/STSceneManager.cpp src/Graphics/STMaterial.cpp src/Entity/Components/STAABBComponent.cpp src/Entity/Components/STAABBComponent.h src/Entity/Components/STBoundsComponent.h src/SwingTech1.h src/Entity/Components/STShadowComponent.h src/Entity/Util/Loaders/STOBJLoader.cpp src/Entity/Util/Loaders/STOBJLoader.h src/Entity/Util/Loaders/STMeshCommon.h src/Entity/Util/Loaders/STMeshLoader.h src/Entity/Transform.cpp include/assimp/ src/Graphics/Interface/UI_Components/STButtonComponent.h src/Graphics/Interface/UI_Components/STTextComponent.h src/Math/Shape/BoundingBox.h src/Application/Util/Data_Structure/STList.h src/Application/Util/Data_Structure/STQueue.h src/Application/Util/File/STFileManager.cpp src/Application/Util/File/STFileManager.h src/Application/Util/STJson.h src/Application/STAssetManager.cpp src/Application/STAssetManager.h src/Entity/STLight.cpp src/Entity/Components/ST3DAnimationComponent.cpp src/Entity/Components/ST3DAnimationComponent.h src/Entity/Components/STSpriteComponent.cpp src/Entity/Components/STSpriteComponent.h src/Entity/Util/Loaders/STAnimationCommon.h src/Graphics/GL/GLSkinnedMesh.cpp src/Graphics/GL/GLSkinnedMesh.h src/Math/Quaternion.cpp src/Math/STMath.h src/Math/Matrix.cpp src/Physics/STPhysics.h src/Physics/Bullet/BulletPhysics.cpp src/Physics/Bullet/BulletPhysics.h src/Physics/STPhysics.cpp src/Physics/STRigidBody.h src/Physics/Bullet/BulletRigidBody.cpp src/Physics/Bullet/BulletRigidBody.h src/Entity/Components/ST3DPhysicsComponent.cpp src/Entity/Components/ST3DPhysicsComponent.h src/Application/Util/File/STSerializableStruct.h src/Application/Util/File/STSerializableClass.h src/Application/Util/Data_Structure/STMap.h src/Entity/Components/STComponent.cpp)

add_executable(SwingTech1 main.cpp ${SOURCE_FILES} )
if(WIN32)
target_link_libraries(SwingTech1 SDL2main SDL2 SDL2_image glew32 opengl32 FREETYPE; ${LUA})
endif()

add_executable(demoSwing demo/demo_main.cpp ${SOURCE_FILES})
if(WIN32)
target_link_libraries(demoSwing SDL2main SDL2 SDL2_image glew32 opengl32 FREETYPE; ${LUA} ${ASSIMP})
else()
target_link_libraries(demoSwing SDL2 SDL2_image GL GLU GLEW freetype lua5.1 ${ASSIMP})
endif()

add_library(SwingTech_1 ${SOURCE_FILES})
if(WIN32)
    target_link_libraries(SwingTech_1 SDL2main SDL2 SDL2_image glew32 opengl32 FREETYPE; ${LUA} ${ASSIMP})
else()
target_link_libraries(SwingTech_1 SDL2 SDL2_image GL GLU GLEW freetype lua5.1 ${ASSIMP})
endif()

add_executable(STSample ${SOURCE_FILES} demo/STSample.cpp)
if(WIN32)
	if(MINGW)
		target_link_libraries(STSample SDL2main SDL2 SDL2_image ${GLEW} opengl32 ${FREETYPE} ${LUA} ${ASSIMP} ${BULLET_DYNAMICS} ${BULLET_COLLISION} ${BULLET_LINEAR_MATH})
	elseif(MSVC)
		target_link_libraries(STSample ${SDL2main} ${SDL2} SDL2_image ${GLEW} opengl32 ${FREETYPE} ${LUA} ${ASSIMP} ${BULLET_DYNAMICS} ${BULLET_COLLISION} ${BULLET_LINEAR_MATH})
	endif()
else()
    target_link_libraries(STSample SDL2 SDL2_image GL GLU ${GLEW2.1} freetype lua5.1 ${ASSIMP})
endif()

add_executable(ds_test demo/DataStructureTest.cpp)