
float calculateShadow(vec4 fragPosLightSpace, sampler2DArray shadowArray, int index, float bias){
        vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
        projCoords = projCoords * 0.5 + 0.5;
        float closestDepth = texture(shadowArray, vec3(projCoords.xy, index)).r;
        float currentDepth = projCoords.z;
        float shadow = currentDepth - bias > closestDepth ? 1.0 : 0.0;
        if(projCoords.z > 1.0) shadow = 0.0;
        return shadow;
}

float calculateShadow(vec4 fragPosLightSpace, sampler2DArray shadowArray, int index){
        vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
        projCoords = projCoords * 0.5 + 0.5;
        float closestDepth = texture(shadowArray, vec3(projCoords.xy, index)).r;
        float currentDepth = projCoords.z;
        float shadow = currentDepth > closestDepth ? 1.0 : 0.0;
        return shadow;
}


float calculateShadow(vec4 fragPosLightSpace, sampler2D shadowMap, vec2 lowerBound, vec2 upperBound){
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    projCoords = projCoords * 0.5 + 0.5;
    vec2 newCoords = (lowerBound + vec2(0.25, 0.25)) + (projCoords.xy * vec2(0.25, 0.25));
    float closestDepth = texture(shadowMap, newCoords).r;
    float currentDepth = projCoords.z;
    float shadow = currentDepth > closestDepth ? 1.0 : 0.0;
    return shadow;
}